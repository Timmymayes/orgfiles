#^+Title: Emacs US Config
#+PROPERTY: header-args:emacs-lisp :tangle "C:/Users/Tyler/init.el"


* Init
Initialization script
This will make sure system does the right shit

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")

  ;; setup passthrough keys
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper)
  (setq w32-pass-lwindow-to-system nil)
  (setq w32-lwindow-modifier 'super)
#+end_src

#+RESULTS:
: C:/Users/Tyler/init.el




* Package Setup
#+begin_src emacs-lisp
  (require 'package)



  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ;;("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")

                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (assq-delete-all 'org package--builtins)
  (assq-delete-all 'org package--builtin-versions)
  (unless package-archive-contents
    (package-refresh-contents))

                                          ; Initialize use-package on non-Linux platforms

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)



#+end_src

#+RESULTS:
: t

* Mail with mu4e
** Config
#+BEGIN_SRC emacs-lisp
  ;; (use-package mu4e
  ;;    :ensure nil
  ;;    ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;;    :config
  ;;    ;; this si set to t to avoid mail syncing issues
  ;;    (setq mu4e-change-filenames-when-moving t)
  ;;    ;; refresh mail using isync every 10 minutes
  ;;    (setq mu4e-update-interval (* 10 60))
  ;;    (setq mu4e-get-mail-command "mbsync -a")
  ;;    (setq mu4e-maildir "~/Mail")

  ;;    (setq mu4e-drafts-folder "/'[Gmail]'.Drafts")
  ;;    (setq mu4e-sent-folder "/[Gmail].Sent Mail")
  ;;    (setq mu4e-refile-folder "/[Gmail].All Mail")
  ;;    (setq mu4e-trash-folder "/[Gmail].Trash")

  ;;    (setq mu4e-maildir-shortcuts
  ;;    '(("/Inbox"                   . ?i)
  ;;      ("/[Gmail].Sent Mail"       . ?s)
  ;;      ("/[Gmail].Trash"           . ?t)
  ;;      ("/[Gmail].Drafts"          . ?d)
  ;;      ("/[Gmail].All Mail"        . ?a))))

#+END_SRC

#+RESULTS:
: t

#+RESULTS:mu
: t
** Hotkeys
| Key | Command                             | Description                        |
|-----+-------------------------------------+------------------------------------|
|     | *Movement*                            |                                    |
|     | ---                                 |                                    |
| n   | next-line                           | moves to next line                 |
| p   | prev-line                           | moves to prev line                 |
| [   | mu4e-headers-prev-unread            | moves to prev unread message       |
| ]   | mu4e-headers-next-unread            | moves to next unread message       |
| j   | mu4e-headers-jump-to-mail-dir       | Jump to another mail directory     |
|     |                                     |                                    |
|     | *Toggles*                             |                                    |
| P   | mu4e-headers-toggle-threading       | Toggles threaded message display   |
| W   | mu4e-headers-toggle-include-related | Toggles related message display    |
|     |                                     |                                    |
|     | *Marking*                             |                                    |
| d   | mu4e-headers-mark-for-trash         | Marks message for deletion         |
| m   | mu4e-headers-mark-for-move          | Marks message for move to folder   |
| +   | mu4e-headers-mark-for-flag          | Marks message for flagging         |
| -   | mu4e-headers-mark-for-unflag        | Marks smessage for unflagging      |
| %   | mu4e-headers-mark-for-pattern       | Marks based on a regex pattern     |
| u   | mu4e-headers-mark-for-unmark        | Removes mark for message           |
| U   | mu4e-mark-unmark-all                | Removes mark for all marks in view |
| x   | mu4e-mark-execute-all               | Execute all marks in view          |
|     |                                     |                                    |
|     | *Searching*                           |                                    |
| s   | mu4e-headers-search                 | Search all e-mails                 |
| S   | mu4e-headers-search-edit            | Edit current search (useful!!)     |
| /   | mu4e-headers-search-narrow          | Narrow down the current results    |
| b   | mu4e-headers-search-bookmark        | Select a bookmark to search with   |
| B   | mu4e-headers-search-bookmark-edit   | Edit bookmark before search        |
| g   | mu4e-rerun-search                   | Rerun current search               |




[[./images/thing.png ]]
 


* Basic UI Config
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ;Disable visible scrollbar
  (tool-bar-mode -1)   ;DIsable toolbar
  (tooltip-mode -1)    ;disable tooltips11
  (set-fringe-mode 10) ;give some breathing room

  (menu-bar-mode -1)   ;disable menu bar

                                          ; setup the visible bell

  (setq visible-bell t)

                                          ;set font

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)
                                          ; load theme note this passes an object denoted by a leading `


  (load-theme 'tango-dark)


  (desktop-save-mode 1)





;; FIX-ME test







#+end_src

#+RESULTS:
: t

** Themes
#+begin_src emacs-lisp
                                          ;set doom themes
  (use-package doom-themes
    :ensure t
    :config
    ;;(load-theme 'doom-gruvbox t))
    (load-theme 'doom-sourcerer t))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 15))

#+end_src

#+RESULTS:
: t

** Transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))

  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-c x t") 'toggle-transparency)
#+END_SRC

#+RESULTS:
: toggle-transparency

* Emacs Usability
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: helpful-key

** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish (which-key-mode)
    :config
    (setq which-key-idle-delay 1))

#+end_src

#+RESULTS:
: t

** Completion
#+begin_src emacs-lisp

  ;;           (use-package counsel
  ;;             :bind (("M-x" . counsel-M-x)
  ;;                    ("C-x b" . counsel-ibuffer)


  ;; story)))

  ;;        (use-package ivy-richt
  ;;        :init
  ;;      (ivy-rich-mode 1))

  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))



#+end_src

#+RESULTS:

** Yas Mode
#+BEGIN_SRC emacs-lisp
  ;; Todo add Yas mode load

  (yas-global-mode 1)
  (setq yas-snippet-dirs '("c:/Users/Tyler/snippets" yasnippet-snippets-dir))
  (yas-reload-all)
#+END_SRC

#+RESULTS:
| c:/Users/tyler/snippets | yasnippet-snippets-dir |




* Window Control
** Avy & Ace
Great article on Avy - https://karthinks.com/software/avy-can-do-anything/
#+BEGIN_SRC emacs-lisp
  (use-package ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ;;

  (use-package avy
    :config (progn
              (setq avy-background nil)
              (setq avy-styles-alist '((avy-goto-char-2 . at)
                                       (avy-goto-char-timer . at)))))




  (global-set-key (kbd "M-.") 'avy-goto-char-2)
  (global-set-key (kbd "M-,") 'avy-goto-char-timer)
  ;; unbund c-] from abort-recursive-edit
  (global-set-key (kbd "C-+") 'smartscan-symbol-go-backward)
  (global-set-key (kbd "C-=") 'smartscan-symbol-go-forward)




#+END_SRC

#+RESULTS:
: smartscan-symbol-go-forward



#+RESULTS:
: counsel-ibuffer

#+RESULTS:[]
: counsel-ibuffer

* Org Config Setup
** Package Setup
#+begin_src emacs-lisp
        ;;;;; Org mode setup ;;;;;

    (defun org-mode-setup()                                            ;require tempo org-mode-setup()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1))



    (use-package org
      :hook (org-mode . org-mode-setup)
      :config
      (setq org-agenda-files
            (quote ("~/Orgfiles"
                    )))


      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-startup-with-inline-images t)
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t)
      (setq org-use-speed-commands t)
      (setq org-todo-keywords
            (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      (setq org-todo-keyword-faces
            (quote (("TODO" :foreground "red" :weight bold)
                    ("NEXT" :foreground "blue" :weight bold)
                    ("DONE" :foreground "forest green" :weight bold)
                    ("WAITING" :foreground "orange" :weight bold)
                    ("HOLD" :foreground "magenta" :weight bold)
                    ("CANCELLED" :foreground "forest green" :weight bold)
                    ("MEETING" :foreground "forest green" :weight bold)
                    ("PHONE" :foreground "forest green" :weight bold))))

      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("CANCELLED" . t))
                    ("WAITING" ("WAITING" . t))
                    ("HOLD" ("WAITING") ("HOLD" . t))
                    (done ("WAITING") ("HOLD"))
                    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

      ;; s-Left & s-Right moves status
      (setq org-treat-S-cursor-todo-selection-as-state-change nil)

      (setq org-global-properties
            '(("Effort_All" . "0 0:10 0:30 1:00 2:00 3:00 4:00")))

                                            ; org capture

      (setq org-capture-templates
            '(
              ("t" "Task" entry (file "~/Orgfiles/refile.org")
               "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
              ("m" "Meeting" entry (file "~/Orgfiles/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/Orgfiles/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("n" "note" entry (file "~/Orgfiles/refile.org")
               "* %? :NOTE:\n%u\n%a\n %i" :empty-lines 1)
              ("r" "reminder" entry (file "~/Orgfiles/refile.org")
               "* %? :REMINDER:\n %^T \n %U\n %a\n%i" :empty-lines 1)
              ("!" "recurring reminder" entry (file "~/Orgfiles/refile.org")
               "* %? :REMINDER:\n %U\n  \n%a\n%i" :empty-lines 1)
              ("w" "Weight" table-line (file+headline "~/Orgfiles/metrics.org" "Weight")
               "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
              ("g" "Goal" entry 
               (file buffer-file-name)
               "* _%^{Goal}_ [/] :noexport: %^{TYPE}p %^{OUTCOME}p %^{RETROSPECTIVE}p" :prepend t)
              ("a" "Activity" entry
               (file+function buffer-file-name set-activity-pos-from-goal)
               "** Pending %^{Activity} %^{TYPE}p %^{OUTCOME}p %^{RETROSPECTIVE}p" :prepend t))))


                                            ; hotkey bindings
    (define-key global-map (kbd "C-c c")
      (lambda () (interactive) (org-capture)))

    (define-key global-map (kbd "C-c m")
      (lambda () (interactive) (org-capture nil "m")))  

    (define-key global-map (kbd "C-c t")
      (lambda () (interactive) (org-capture nil "t")))

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "<f5>") 'bh/toggle-next-task-display)

    (global-set-key (kbd "s-i") 'org-toggle-inline-images)  


                                            ; refile targets

    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))

                                            ; Use full outline paths for refile targets - we file directly with IDO
    (setq org-refile-use-outline-path t)

                                            ; Targets complete directly with IDO
    (setq org-outline-path-complete-in-steps nil)

                                            ; Allow refile to create parent tasks with confirmation
    (setq org-refile-allow-creating-parent-nodes (quote confirm))

                                            ; Use IDO for both buffer and file completion and ido-everywhere to t

                             ;;;; Refile settings
                                            ; Exclude DONE state tasks from refile targets
    (defun bh/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))

    (setq org-refile-target-verify-function 'bh/verify-refile-target)

    ;; (setq org-refile-targets
    ;;       '(("archive.org" :maxlevel . 1)
    ;;         ("tasks.org" :maxlevel . 1)))
                                            ; load org habits
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (add-to-list  'org-src-lang-modes '("plantuml" . plantuml))

    (global-set-key (kbd "C-c b") 'org-switchb)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c H-a") 'org-archive-subtree)

    ;; Remove empty LOGBOOK drawers on clock out

                                   ;;;;; end org mode setup ;;;;;

    ;; Org Agenda Setup
    ;; Do not dim blocked tasks
    (setq org-agenda-dim-blocked-tasks nil)
    (add-hook 'org-agenda-finalize-hook #'hl-line-mode)

    ;; Compact the block agenda view
    (setq org-agenda-compact-blocks t)
    ;; start norang agenda view

                ;;;;;;;;;; variable setup
    ;; Start in same window
    (setq org-agenda-window-setup 'current-window)

    ;;reverse note order disabled
    (setq org-reverse-note-order nil)
    ;; Leading 0 for military time
    (setq org-agenda-time-leading-zero t)
    ;; sticky agendas
    (setq org-agenda-sticky t)
    ;; Enforce Dependencies
    (setq org-enforce-todo-dependencies t)
    ;; Start with log mode disabled
    (setq org-agenda-start-with-log-mode nil)

    ;; number of seperators to 0
    (setq org-cycle-seperator-lines 0)

    ;; Remove completed deadline tasks from the agenda view
    (setq org-agenda-skip-deadline-if-done t)

    ;; Remove completed scheduled tasks from the agenda view
    (setq org-agenda-skip-scheduled-if-done t)

    ;; Remove completed items from search results
    (setq org-agenda-skip-timestamp-if-done t)

    (setq org-agenda-tags-todo-honor-ignore-options t)

    (setq org-agenda-text-search-extra-files (quote (agenda-archives)))

    ;; clean logbook

    ;; Remove empty LOGBOOK drawers on clock out
    (defun bh/remove-empty-drawer-on-clock-out ()
      (interactive)
      (save-excursion
        (beginning-of-line 0)
        (org-remove-empty-drawer-at "LOGBOOK" (point))))

    (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)



    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  (" " "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-HOLD-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-tags-match-list-sublevels 'indented)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED+WAITING|HOLD/!"
                               ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-tasks)
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                           (org-tags-match-list-sublevels nil))))
                   nil))))

    ;; start norang helpers

    (defun bh/skip-non-archivable-tasks ()
      "Skip trees that are not available for archiving"
      (save-restriction
        (widen)
        ;; Consider only tasks with done todo headings as archivable candidates
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
              (subtree-end (save-excursion (org-end-of-subtree t))))
          (if (member (org-get-todo-state) org-todo-keywords-1)
              (if (member (org-get-todo-state) org-done-keywords)
                  (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                         (a-month-ago (* 60 60 24 (+ daynr 1)))
                         (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                         (this-month (format-time-string "%Y-%m-" (current-time)))
                         (subtree-is-current (save-excursion
                                               (forward-line 1)
                                               (and (< (point) subtree-end)
                                                    (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                    (if subtree-is-current
                        subtree-end ; Has a date in this month or last month, skip it
                      nil))  ; available to archive
                (or subtree-end (point-max)))
            next-headline))))  



    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
        (widen)
        (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (goto-char parent-task)
          parent-task)))


    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))

    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
                   Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))

    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))

    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))

    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
                     This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
                     This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defvar bh/hide-scheduled-and-waiting-next-tasks t)

    (defun bh/toggle-next-task-display ()
      (interactive)
      (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
      (when  (equal major-mode 'org-agenda-mode)
        (org-agenda-redo))
      (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

    (defun bh/skip-stuck-projects ()
      "Skip trees that are not stuck projects"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    nil
                  next-headline)) ; a stuck project, has subtasks but no next task
            nil))))

    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))

    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (cond
               ((bh/is-project-p)
                nil)
               ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
                nil)
               (t
                subtree-end))))
        (save-excursion (org-end-of-subtree t))))

    (defun bh/skip-non-tasks ()
      "Show non-project tasks.
                   Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((bh/is-task-p)
            nil)
           (t
            next-headline)))))

    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((and bh/hide-scheduled-and-waiting-next-tasks
                 (member "WAITING" (org-get-tags-at)))
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))

    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
                   When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
                   When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-project-tasks ()
      "Show non-project tasks.
                   Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           ((bh/is-project-subtree-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-project-tasks ()
      "Show project tasks.
                   Skip project and sub-project tasks, habits, and loose non-project tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           ((not (bh/is-project-subtree-p))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))

    ;; Agenda Sorting




    ;; End norang agenda setup



    ;; setup v-align mode for tables
    (use-package valign)
    (add-hook 'org-mode-hook #'valign-mode)

#+end_src

#+RESULTS:
| my/org-buffer-setup | (lambda nil (display-line-numbers-mode 0)) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-mode-visual-fill | (lambda nil (add-hook 'after-save-hook #'emacsone/org-babel-tangle-config)) | org-bullets-mode | valign-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-mode-setup |


** Font Configuration
#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
                                          ; keep a few things fixed pitch as they should be for line ups

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
                                          ;  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  ;; font lock modes
  (require 'font-lock)
  (all-the-icons-completion-mode 1)

#+end_src

#+RESULTS:
: t

** bullets and dashes
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


                                          ;replace dashes with dots

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


  (global-prettify-symbols-mode t)

  (defun my/org-buffer-setup ()
    (push '("[ ]" . "☐" ) prettify-symbols-alist)
    (push '("[X]" . "☑" ) prettify-symbols-alist)
    (push '("[-]" . "❍" ) prettify-symbols-alist)
    )

  (add-hook 'org-mode-hook #'my/org-buffer-setup)
  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))



#+end_src

#+RESULTS:

** Structure Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
                                          ;  (require 'org-tempo)
                                          ;  (with-eval-after-load 'org-tempo
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src


#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Language Setup
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp .t )
     (js .t)
     (python .t)))

#+end_src

#+RESULTS:

** Auto-Tangle Config Files
#+begin_src emacs-lisp
  ;;auto tangle  emacs config file
  ;;
  (defun emacsone/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "c:/Users/Tyler/emacsone/OrgFiles/emacsconf.org"))
      ;; dynamic scoping
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'emacsone/org-babel-tangle-config)))
#+end_src

#+RESULTS:
| (lambda nil (display-line-numbers-mode 0)) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-mode-visual-fill | (lambda nil (add-hook 'after-save-hook #'emacsone/org-babel-tangle-config)) | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-mode-setup |

** Visual Fill Mode
#+begin_src emacs-lisp
  (defun org-mode-visual-fill()
    (setq visual-fill-column-width 200 visual-fill-column-center-text t)
    (visual-fill-column-mode 1))


  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))

#+end_src

#+RESULTS:
| org-mode-visual-fill | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-mode-setup |

** Pomodoro
#+BEGIN_SRC emacs-lisp

  (setq org-clock-sound "~/Downloads/cheer.wav")
#+END_SRC

#+RESULTS:
: ~/Downloads/cheer.wav

* Org-Roam Setup
#+BEGIN_SRC emacs-lisp


  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-act t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    ( org-agenda-todo-list-sublevels nil)

    :bind
    (("C-c n l" . org-roam-buffer-toggle)

     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n i" . org-id-get-create)
     ("C-c n a" . org-roam-alias-add)
     ("C-c n t" . org-roam-tag-add)
     ("C-c n r" . org-roam-ref-add)
     ("C-c n x a" . org-roam-alias-remove)
     ("C-c n x r" . org-roam-ref-remove)
     ("C-c n x t" . org-roam-tag-remove)

     ("C-c n I" . org-roam-node-insert-immediate)
     :map org-mode-map
     ("C-c n b" . org-mark-ring-goto)
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)
     ("T" . org-roam-dailies-capture-tomorrow))

    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))

  ;;  Bind this to C-c n I
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))



  (with-eval-after-load "org-roam"
    (setq org-roam-capture-templates
          '(("d" "default" plain
             "%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
             :unnarrowed t)
            ;; programming language
            ("l" "programming language" plain
             "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
             :unnarrowed t)
            ;; programming insight - javascript
            ("i" "Programming Insights" plain
             "* Problem\n\n* Insight:\n\n* Solution:\n\n* Refactoring:\n\n* Fig1:\n\n#+BEGIN_SRC javascript\n\n\n#+END_SRC"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
             :unnarrowed t)
            ("b" "book notes" plain
             "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\nest")
             :unnarrowed t))))


  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:30}" 'face 'org-tag)))

  (use-package org-roam-ui
    :bind ("s-r" . org-roam-ui-open))


#+END_SRC

#+RESULTS:
: org-roam-ui-open

* Ledger-Mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :bind (
           :map ledger-mode-map
           ("s-n" . ledger-navigate-next-uncleared)
           ("s-p" . ledger-navigate-previous-uncleared))
    :mode "\\.dat\\'")

  (setq ledger-reports
        '(("bal"            "%(binary) -f %(ledger-file) bal")
          ("bal this month" "%(binary) -f %(ledger-file) bal -p %(month) -S amount")
          ("bal this year"  "%(binary) -f %(ledger-file) bal -p 'this year'")
          ("net worth"      "%(binary) -f %(ledger-file) bal Assets Liabilities")
          ("account"        "%(binary) -f %(ledger-file) reg %(account)")))



#+END_SRC

#+RESULTS:
| bal            | %(binary) -f %(ledger-file) bal                       |
| bal this month | %(binary) -f %(ledger-file) bal -p %(month) -S amount |
| bal this year  | %(binary) -f %(ledger-file) bal -p 'this year'        |
| net worth      | %(binary) -f %(ledger-file) bal Assets Liabilities    |
| account        | %(binary) -f %(ledger-file) reg %(account)            |

* IDE Setup
** To add

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :bind (("s-m m" . magit-status)
           ("s-m j" . magit-dispatch)
           ("s-m k" . magit-file-dispatch)
           ("s-m l" . magit-log-buffer-file)
           ("s-m b" . magit-blame))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (setq magit-clone-default-directory "~/Projects/")

  ;; Bindings



#+end_src

#+RESULTS:
: ~/Projects/

** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))
  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+END_SRC

#+RESULTS:
: t

** Forge
#+begin_src emacs-lisp
  (use-package forge)
#+end_src

#+RESULTS:

** Git from Clipboard
#+begin_src emacs-lisp
  (defun ar/git-clone-clipboard-url ()
    "Clone git URL in clipboard asynchronously and open in dired when finished."
    (interactive)
    (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
    (let* ((url (current-kill 0))
           (download-dir (expand-file-name "~/Downloads/"))
           (project-dir (concat (file-name-as-directory download-dir)
                                (file-name-base url)))
           (default-directory download-dir)
           (command (format "git clone %s" url))
           (buffer (generate-new-buffer (format "*%s*" command)))
           (proc))
      (when (file-exists-p project-dir)
        (if (y-or-n-p (format "%s exists. delete?" (file-name-base url)))
            (delete-directory project-dir t)
          (user-error "Bailed")))
      (switch-to-buffer buffer)
      (setq proc (start-process-shell-command (nth 0 (split-string command)) buffer command))
      (with-current-buffer buffer
        (setq default-directory download-dir)
        (shell-command-save-pos-or-erase)
        (require 'shell)
        (shell-mode)
        (view-mode +1))
      (set-process-sentinel proc (lambda (process state)
                                   (let ((output (with-current-buffer (process-buffer process)
                                                   (buffer-string))))
                                     (kill-buffer (process-buffer process))
                                     (if (= (process-exit-status process) 0)
                                         (progn
                                           (message "finished: %s" command)
                                           (dired project-dir))
                                       (user-error (format "%s\n%s" command output))))))
      (set-process-filter proc #'comintoutput-filter)))
#+end_src



** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src
** Rainbow Deliminators
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Electric Pair mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (add-hook 'prog-mode-hook 'electric-indent-mode)
  (global-set-key (kbd "C-c s (") 'electric-pair-mode)


#+END_SRC

#+RESULTS:
| electric-indent-mode | electric-pair-mode | my-display-numbers-hook | rainbow-delimiters-mode |
** Line Numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)

  (defun my-display-numbers-hook ()
    (display-line-numbers-mode t)
    )
  (add-hook 'prog-mode-hook 'my-display-numbers-hook)
  (add-hook 'text-mode-hook 'my-display-numbers-hook)
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:
** subword mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

#+RESULTS:
| subword-mode | my-display-numbers-hook | electric-indent-mode | electric-pair-mode | rainbow-delimiters-mode | git-gutter-mode |

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))
#+end_src

** Mini-map
#+BEGIN_SRC emacs-lisp
  (use-package minimap)

  (setq minimap-window-location 1)

  (global-set-key (kbd "C-c s m")  'minimap-mode)
#+END_SRC

#+RESULTS:
: minimap-mode

** Languages
*** HTML & CSS
Some possible html modes to look into:
http://xahlee.info/emacs/emacs/emacs_html.html
http://xahlee.info/emacs/emacs/xah-css-mode.html
**** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)
                                          ; hook into web mode for file types
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;;using rsjx mode
  ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
                                          ;(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
  ;; using rsjx mode
  ;;(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

                                          ; set company completions vocab to css and html

  (setq web-mode-enable-engine-detection t)

#+END_SRC

#+RESULTS:
: t
**** emmet-mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :bind
    ("M-n" . emmet-next-edit-point)
    ("M-p" . emmet-prev-edit-point))
                                          ; use emmet in all web-mode docs
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)

                                          ; enable mode switching between css and java
  (add-hook 'web-mode-before-auto-complete-hooks
            '(lambda ()
               (let ((web-mode-cur-language
                      (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-language "php")
                     (yas-activate-extra-mode 'php-mode)
                   (yas-deactivate-extra-mode 'php-mode))
                 (if (string= web-mode-cur-language "css")
                     (setq emmet-use-css-transform t)
                   (setq emmet-use-css-transform nil)))))




#+END_SRC

#+RESULTS:
| lambda | nil | (let ((web-mode-cur-language (web-mode-language-at-pos))) (if (string= web-mode-cur-language php) (yas-activate-extra-mode (quote php-mode)) (yas-deactivate-extra-mode (quote php-mode))) (if (string= web-mode-cur-language css) (setq emmet-use-css-transform t) (setq emmet-use-css-transform nil))) |
**** css-mode
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Language Server
#+begin_src emacs-lisp
                                              ; breadcrumb setup

      (defun lsp-mode-setup ()
        (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
        (lsp-headerline-breadcrumb-mode))

      (use-package lsp-mode
        :commands (lsp lsp-deffered)
        :hook (lsp-mode . lsp-mode-setup)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))
                                              ; turn on lsp ui

      (use-package lsp-ui
        :after lsp
        :hook (lsp-mode . lsp-ui-mode)
        :config
        (setq lsp-ui-doc-position 'bottom))

      (use-package treemacs
        :config
          (setq treemacs-select-when-already-in-treemacs 'close))

      (use-package lsp-treemacs
        :after lsp)





#+end_src

#+RESULTS:
: close
*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src
*** Javascript
Following setup from here: https://www.chadstovern.com/javascript-in-emacs-revisited/
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.js\\'"
           "\\.jsx\\'")
    :config
    (setq js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          js2-basic-offset 2
          js-indent-level 2)
    ;; (setq-local flycheck-disabled-checkers (cl-union flycheck-disabled-checkers
    ;;                                                  '(javascript-jshint))) ; jshint doesn't work for JSX
    (electric-pair-mode 1))

  (use-package add-node-modules-path
    :defer t
    :hook (((js2-mode rjsx-mode) . add-node-modules-path)))

  ;; prettify

  (use-package prettier-js
    :defer t
    :diminish prettier-js-mode
    :hook (((js2-mode rjsx-mode) . prettier-js-mode)))

  ;; setup lsp mode
  (use-package lsp-mode
    :defer t
    :diminish lsp-mode
    :hook (((js2-mode rjsx-mode) . lsp))
    :commands lsp
    :config
    (setq lsp-auto-configure t
          lsp-auto-guess-root t
          ;; don't set flymake or lsp-ui so the default linter doesn't get trampled
          lsp-diagnostic-package :none))



  (use-package lsp-ui
    :defer t
    :config
    (setq lsp-ui-sideline-enable t
          ;; disable flycheck setup so default linter isn't trampled
          lsp-ui-flycheck-enable nil
          lsp-ui-sideline-show-symbol nil
          lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-show-code-actions nil
          lsp-ui-peek-enable nil
          lsp-ui-imenu-enable nil
          lsp-ui-doc-enable nil))


  (defun my-js-comint-keys ()
    "My Keys for sending to the js-comint repl"
    (interactive)
    (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
    (local-set-key (kbd"C-c b") 'js-send-buffer)
    (local-set-key (kbd"C-c r") 'js-send-region)
    (local-set-key (kbd"C-c C-r") 'js-send-region-and-go))




  (require 'js-comint)
  (setq inferior-js-program-command "node --interactive")
  (setenv "NODE_NO_READLINE" "1")
  (add-hook 'rjsx-mode-hook 'my-js-comint-keys)
  (add-hook 'rjsx-mode-hook 'emmet-mode)


  (with-eval-after-load 'flycheck
    (flycheck-add-next-checker 'javascript-eslint '(t . javascript-jscs)))





#+END_SRC

#+RESULTS:
***
** Better Completions
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook ((lsp-mode web-mode) . company-mode)
    :bind (:map company-active-map
                ( "<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    )
  (setq company-minimum-prefix-length 2)



  (use-package company-web
    :after company)


  (defun my-web-mode-hook ()
    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files)))

  (add-hook 'web-mode-hook 'my-web-mode-hook)

  ;; Company mode for yas
  (global-set-key (kbd "<C-tab>") 'company-yasnippet)
                                          ;  (use-ackage company-box
                                          ;   :hook (company-mode . company-box-mode))
#+end_src

#+RESULTS:
: company-yasnippet

** Debugging
Dap mode here: https://www.youtube.com/watch?v=0bilcQVSlbM

* Macros and rebind

** Dabbrev
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-=") 'dabbrev-expand)
  (global-set-key (kbd "M-C-=") 'dabbrev-completion)
#+END_SRC

#+RESULTS:
: dabbrev-completion

** next-tag - "C-x t" - Move inside the next tag set in web-mode
#+BEGIN_SRC emacs-lisp
  (defun next-tag()
    (interactive)
    (web-mode-element-next)
    (web-mode-tag-end))



  (global-set-key  (kbd "C-x t") 'next-tag)

  ;; timer controls
  (global-set-key (kbd "H-t t") 'org-timer-set-timer)
  (global-set-key (kbd "H-t s") 'org-timer-start)
  (global-set-key (kbd "H-t x") 'org-timer-stop)
  (global-set-key (kbd "H-t z") 'org-timer-pause-or-continue)


  ;; set ctrl z to undo
  (global-set-key (kbd "C-z") 'undo)

#+END_SRC

#+RESULTS:
: undo

#+RESULTS::
: next-tag

** Window Movement
Managing Windows, buffers etc
*** General movement
**** Keymap
| action                  | key        |
|-------------------------+------------|
| other-window            | M-+        |
| 'ace-window             | M-[        |
| 'treemacs-select-window | M-]        |
| 'treemacs               | C-c s t    |
| 'delete-window          | H-<escape> |
| 'delete-other-windows   | H-1        |
| 'split-window-below     | H-2        |
| 'split-window-right     | H-3        |
| 'buffer-menu            | C-H        |
| 'buffer-quick-switch    | H-b        |
| 'list-bookmarks         | C-H-g      |
| 'dired-jump             | C-H-t      |
| 'kill-current-buffer    | H-k        |

**** Bindings
#+BEGIN_SRC emacs-lisp
  ;; Macros & commands
  (fset 'buffer-quick-switch
        (kmacro-lambda-form [?\C-x ?b return] 0 "%d"))

  ;; Bindings
  (global-set-key (kbd "M-+") 'other-window)
  (global-set-key (kbd "M-[") 'ace-window)
  (global-set-key (kbd "M-]") 'treemacs-select-window)
  (global-set-key (kbd "C-c s t") 'treemacs)
  (global-set-key (kbd "H-<escape>") 'delete-window)
  (global-set-key (kbd "H-1") 'delete-other-windows)
  (global-set-key (kbd "H-2") 'split-window-below)
  (global-set-key (kbd "H-3") 'split-window-right)
  (global-set-key (kbd "C-H-b") 'buffer-menu)
  (global-set-key (kbd "H-b") 'buffer-quick-switch)
  (global-set-key (kbd "C-H-g") 'list-bookmarks)
  (global-set-key (kbd "C-H-t") 'dired-jump)
  (global-set-key (kbd "H-k") 'kill-current-buffer)  
#+END_SRC

#+RESULTS:
: kill-current-buffer

** Cursor Movement
#+BEGIN_SRC emacs-lisp
  (defun insert-line-above-and-go ()
    ;;insert a line above the current one and move the cursor there
    (interactive)
    (previous-line nil)
    (move-end-of-line nil)
    (electric-newline-and-maybe-indent)
    (indent-relative-first-indent-point))

  (global-set-key (kbd "M-o") 'insert-line-above-and-go)

  ;;
                                          ;

                                          ; ;

  ;; move C-j to C-; indent-new-comment-line
  (global-set-key (kbd "C-;") 'indent-new-comment-line)

  (global-set-key (kbd "H-]") 'xref-find-references)
  (global-set-key (kbd "H-[") 'xref-go-back)
  (global-set-key (kbd "H-g") 'goto-line)

  (defun wrap-sexp-backward-with-parenthesis()
    (interactive)
    (backward-sexp)
    (mark-sexp)
    (insert-parentheses))

  (global-set-key (kbd "C-(") 'wrap-sexp-backward-with-parenthesis)









#+End_SRC

#+RESULTS:
: wrap-sexp-backward-with-parenthesis
** Delete at cursor
#+BEGIN_SRC emacs-lisp
  (defun kill-word-at-point()
    (interactive)
    (kill-word 1)
    (backward-kill-word 1))

  (global-set-key (kbd "M-DEL") 'kill-word-at-point)

  (defun kill-line-at-point()
    (interactive)
    (back-to-indentation)
    (kill-line))

  (global-set-key (kbd "s-l") 'kill-line-at-point)


#+END_SRC

#+RESULTS:
: kill-line-at-point


**  Duplicate Lines
#+BEGIN_SRC emacs-lisp
  (defun duplicate-current-line()
    "Duplicates the entire line under point. Repetable with 'd' "
    (interactive)
    (back-to-indentation)
    (kill-line)
    (yank)
    (newline)
    (indent-for-tab-command)
    (yank)
    (set-temporary-overlay-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "d") 'duplicate-current-line)
       map)))

  (defun duplicate-line-up-to-point()
    "Duplicates a line from start of indentation up to point. May be repeated with single 'd' presses."
    (interactive)
    (set-mark-command nil)
    (back-to-indentation)
    (kill-ring-save (region-beginning) (region-end))
    (end-of-line)
    (newline)
    ;; example of single key repeat functionality
    (yank)
    (set-temporary-overlay-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "d") 'duplicate-line-up-to-point)
       map)))


  (global-set-key (kbd "H-s-d") 'duplicate-current-line
                  )
  (global-set-key (kbd "H-d") 'duplicate-line-up-to-point)









#+END_SRC

#+RESULTS:
: [8224]
** Register manipulation
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'point-to-register)
  (global-set-key (kbd "C-.") 'jump-to-register)
  (global-set-key (kbd "H-s") 'bookmark-set)
  (global-set-key (kbd "H-j") 'bookmark-jump)



#+END_SRC

#+RESULTS:
: bookmark-jump
* dired
** Hotkeys to remember
- m: mark files
- u: umark files
- U: unmark all files
- % -> m: reg expession mark
- * : mark by type
- ( : expand or collapse details
- k : kill marked files ( will kill from view but not delete)
- g : reload buffer
- * t: invert marked files
- S : create sym link
** config
#+BEGIN_SRC emacs-lisp
                                          ; list directories first
  (setq dired-listing-switches "-agho --group-directories-first")
  (setq dired-dwim-target t)


#+END_SRC
#+RESULTS:
: t
** SIngle Dired Buffer
#+BEGIN_SRC emacs-lisp
  (use-package dired-single)
#+END_SRC

#+RESULTS:

** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

#+RESULTS:
| all-the-icons-dired-mode |
** Dired-Open
#+BEGIN_SRC emacs-lisp

                                          ;(use-package dired-open) look into this package if you end up needing it.

#+END_SRC

#+RESULTS:

** Hide Dot Files
- hotkey: . (dot)
#+BEGIN_SRC emacs-lisp
  (defun my-dired-mode-hook ()
    "My `dired' mode hook."
    ;; To hide dot-files by default
    (dired-hide-dotfiles-mode))

  ;; To toggle hiding
  (define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
  (add-hook 'dired-mode-hook #'my-dired-mode-hook)

#+END_SRC

#+RESULTS:
| my-dired-mode-hook | all-the-icons-dired-mode |
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

#+END_SRC

#+RESULTS:
: t

* Testing
Notes about whatever this section
#+BEGIN_SRC emacs-lisp

  ;;set load path for person elisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (global-set-key (kbd "C-M-i") 'indent-region)
  ;; load the package iy-go-to-char
  (load "iy-go-to-char")
  ;; rebind back-to-indentation to "M-i" NOTE this unbinds!! tab-to-tab-stop
  (global-set-key (kbd "M-i") 'back-to-indentation)
  ;; rebind "M-m" iy-go-to-char
  (global-set-key (kbd "s-n") 'iy-go-to-char)
  ;;unbind C-m from return
  (global-set-key (kbd "s-h") 'iy-go-up-to-char)
  (global-set-key (kbd "s-b") 'iy-go-to-char-backward)
  (global-set-key (kbd "s-g") 'iy-go-up-to-char-backward)

  ;; Line to copy - start with a macro
  ;; eventually make this your first fully functional lisp


  ;; insert todays date


  (fset 'agenda-fullscreen
        (kmacro-lambda-form [?\C-c ?a ?a ?\C-x ?1] 0 "%d"))

  (fset 'fsagenda-seas
   (kmacro-lambda-form [?\C-c ?a ?  ?/ ?s ?e ?a ?s return ?\H-1] 0 "%d"))


  (fset 'agenda-with-tasks
        (kmacro-lambda-form [?\C-c ?a ?n] 0 "%d"))


  (fset 'fsagenda-general
        (kmacro-lambda-form [?\C-c ?a ?  ?\H-1 ?\C-u ?/ ?h ?a ?b ?i ?t ?s ?+ ?c ?o ?n ?f ?i ?g ?  return] 0 "%d"))



  (global-set-key (kbd "<f13>") 'fsagenda-general)
  (global-set-key (kbd "<f14>") 'fsagenda-seas)



  ;;
  (load "org-agenda-category-icons")
  (org-agenda-category-icons!

   :material
   (repeat habits)
   (group meeting)
   (cake birthdays)
   (event event)
   (web website)




   :faicon
   (cogs config)
   (tasks tasks)
   (code odin)
   (car vehicle)
   (phone phone)
   (plus-square health)
   (archive archive))



#+END_SRC

#+RESULTS:



* Emacs-Harpoon
#+BEGIN_SRC emacs-lisp
  (defvar
    active-harpoon)
  (setq active-harpoon 102)

  (defun current-buffer-is-harpooned (marker)
    (and (eq (marker-buffer marker) (current-buffer))))  

  (defun harpoon-f ()
    "Update point if in an a harpooned register and jump to the point harpooned in the 'f' register."
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 102)
    (setq active-harpoon 102))

  (defun set-harpoon-f ()
    "Harpoon the current buffer in the 'f' register"
    (interactive)
    (point-to-register 102)
    (setq active-harpoon 102)    
    )

  (defun harpoon-d ()
    "Update point if in an a harpooned register and jump to the point harpooned in the 'd' register."    
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 100)
    (setq active-harpoon 100))

  (defun set-harpoon-d ()
    "Harpoon the current buffer in the 'd' register"
    (interactive)0
    (point-to-register 100)
    (setq active-harpoon 100)    
    )

  (defun harpoon-a ()
    "Update point if in an a harpooned register and jump to the point harpooned in the 'a' register."    
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 97)
    (setq active-harpoon 97))

  (defun set-harpoon-a ()
    "Harpoon the current buffer in the 'a' register"
    (interactive)
    (point-to-register 97)
    (setq active-harpoon 97)    
    )

  (defun harpoon-s ()
    "Update point if in an a harpooned register and jump to the point harpooned in the 'f' register."
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 115)
    (setq active-harpoon 115))

  (defun set-harpoon-s ()
    "Harpoon the current buffer in the 's' register"    
    (interactive)
    (point-to-register 115)
    (setq active-harpoon 115)
    )

   (global-set-key (kbd "H-a") 'harpoon-a)
   (global-set-key (kbd "C-H-a") 'set-harpoon-a)
   (global-set-key (kbd "H-s") 'harpoon-s)
   (global-set-key (kbd "C-H-s") 'set-harpoon-s)
   (global-set-key (kbd "H-d") 'harpoon-d)
   (global-set-key (kbd "C-H-d") 'set-harpoon-d)
   (global-set-key (kbd "H-f") 'harpoon-f)
   (global-set-key (kbd "C-H-f") 'set-harpoon-f)
#+END_SRC

#+RESULTS:
: set-harpoon-f

* Final Loading
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+RESULTS:

* Read Desktop
#+BEGIN_SRC emacs-lisp
  (require 'calfw)
#+END_SRC

#+RESULTS:
: Not reloading desktop; already loaded







